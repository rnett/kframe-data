buildscript{
    ext.web_dir = 'web'
    ext.kotlin_version = '1.3.11'
    ext.frontend_version = '0.0.37'
    ext.ktor_version = '1.1.0'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://dl.bintray.com/kotlin/kotlin-eap"
        }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:$frontend_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

plugins{
    id 'maven-publish'
}

apply plugin: 'kotlin-multiplatform'

apply plugin: 'org.jetbrains.kotlin.frontend'

apply plugin: 'kotlinx-serialization'

group "com.github.rnett.kframe-data"

version "1.0.0a"

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven{ url 'https://jitpack.io' }
}
kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.9.1'
                implementation "io.ktor:ktor-client-core:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.9.1'

                implementation "io.ktor:ktor-server-core:$ktor_version"
                implementation "io.ktor:ktor-server-jetty:$ktor_version"
                implementation "io.ktor:ktor-client-apache:$ktor_version"
                implementation "io.ktor:ktor-auth:$ktor_version"
                implementation 'com.github.rnett:core:1.3.7'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'

                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.9.1'

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-js:$ktor_version"
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

compileKotlinJs {
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.moduleKind = "amd"
}
/*
task assembleWeb(type: Sync) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                        !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlinJs.destinationDir
    into "$buildDir/$web_dir"

    dependsOn classes
}

assemble.dependsOn assembleWeb
*/
kotlinFrontend {
    downloadNodeJsVersion = "latest"
}

